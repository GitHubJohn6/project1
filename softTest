// stClassRoll.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
using namespace std;

class Student
{
	public:
		int presentation, essay1, essay2, project;
		string firstName, lastName, usfID, email;
		vector<Student> studentRoster;

	Student() : presentation(0), essay1(0), essay2(0), project(0)
	{

	}

	~Student()
	{

	}

	//Prints all the details of the student's grade
	void print()
	{
		cout << "Student's name is: " << fullName() << endl;
		cout << "Student's USF ID is: " << usfID << endl;
		cout << "Student's presentation grade is: " << getGradeFromNumber(presentation) << endl;
		cout << "Student's essay #1 grade is: " << getGradeFromNumber(essay1) << endl;
		cout << "Student's essay #2 grade is: " << getGradeFromNumber(essay2) << endl;
		cout << "Student's project grade is: " << getGradeFromNumber(project) << endl << endl;
	}

	//Returns a combination of the student's first and last name
	string fullName()
	{
		return firstName + " " + lastName;
	}

	//Converts the numerical grade values into letter values
	char getGradeFromNumber(int gradeVal)
	{
		switch (gradeVal)
		{
		case 0:
			return 'F';
			break;
		case 1:
			return 'D';
			break;
		case 2:
			return 'C';
			break;
		case 3:
			return 'B';
			break;
		case 4:
			return 'A';
			break;
		default:
			return 'Z';
		}
	}

	//Converts the letter grade values into numerical values
	int getNumberFromGrade(char gradeVal)
	{
		switch (gradeVal)
		{
		case 'F':
			return 0;
			break;
		case 'D':
			return 1;
			break;
		case 'C':
			return 2;
			break;
		case 'B':
			return 3;
			break;
		case 'A':
			return 4;
			break;
		default:
			return -1;
		}
	}

	//Edits the student's data based on the user's input
	void editStudent()
	{
		int chosenOption = -1;

		string input = "";

		while (chosenOption != 0)
		{
			cout << "What would you like to change?" << endl;
			cout << "1. First Name" << endl;
			cout << "2. Last Name" << endl;
			cout << "3. U-Number" << endl;
			cout << "4. E-Mail Address" << endl;
			cout << "5. Presentation Grade" << endl;
			cout << "6. Essay #1 Grade" << endl;
			cout << "7. Essay #2 Grade" << endl;
			cout << "8. Project Grade" << endl;
			cout << endl;
			cout << "Type 0 to exit." << endl;

			cin >> chosenOption;

			switch (chosenOption)
			{
			case 0:
				cout << "Goodbye!" << endl;
				break;
			case 1:
				cout << "Please Enter a New First Name (Currently: " + firstName + "): " << endl;
				cin >> firstName;
				cout << "First Name Changed to: " << lastName << endl << endl;
				break;
			case 2:
				cout << "Please Enter a New Last Name: (Currently: " + lastName + "): " << endl;
				cin >> lastName;
				cout << "Last Name Changed to: " << lastName << endl << endl;
				break;
			case 3:
				cout << "Please Enter a New U-Number: (Currently: " + usfID + "): " << endl;
				cin >> usfID;
				cout << "U-Number Name Changed to: " << usfID << endl << endl;
				break;
			case 4:
				cout << "Please Enter a New E-Mail Address: (Currently: " + email + "): " << endl;
				cin >> email;
				cout << "E-Mail Address Changed to: " << email << endl << endl;
				break;
			case 5:
				cout << "Please Enter a New Presentation Grade: (Currently: " + string(1, getGradeFromNumber(presentation)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						presentation = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Presentation Grade Changed to: " << string(1, getGradeFromNumber(presentation)) << endl << endl;
				break;
			case 6:
				cout << "Please Enter a New Essay #1 Grade: (Currently: " + string(1, getGradeFromNumber(essay1)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						essay1 = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Essay #1 Grade Changed to: " << string(1, getGradeFromNumber(essay1)) << endl << endl;
				break;
			case 7:
				cout << "Please Enter a New Essay #2 Grade: (Currently: " + string(1, getGradeFromNumber(essay1)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						essay1 = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Essay #2 Grade Changed to: " << string(1, getGradeFromNumber(essay1)) << endl << endl;
				break;
			case 8:
				cout << "Please Enter a New Project Grade: (Currently: " + string(1, getGradeFromNumber(project)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						project = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Project Grade Changed to: " << string(1, getGradeFromNumber(project)) << endl << endl;
				break;
			default:
				cout << "That was not a valid option! Please try again: ";
				break;
			}
		}
	}
};

vector<Student> studentRoster;
vector<Student> modifiedStudents;

enum dataOps {REMOVE_STUDENT, EDIT_STUDENT, VIEW_STUDENT, ADD_STUDENT}; //Different options that a user can do once they find a desired student

//Prints the contents of the student roster on the screen
void printContentsOfVector()
{
	for (int i = 1; i < studentRoster.size(); i++)
	{
		studentRoster[i].print();
	}
}

//Rewrites the classRoster.txt file with the contents of studentRoster
void write()
{
	ifstream myfile("classRoster.txt");
	ofstream out_data("classRoster.txt");
	for (int i = 0; i < studentRoster.size() - 1; i++)
	{
		out_data << "\t" << studentRoster[i].firstName << "\t" << studentRoster[i].lastName << "\t" << studentRoster[i].usfID << "\t" << studentRoster[i].email << "\t" << studentRoster[i].presentation << "\t" << studentRoster[i].essay1 << "\t" << studentRoster[i].essay2 << "\t" << studentRoster[i].project << "\n";
	}
	myfile.close();
}

//Removes a student from the vector and updates the file.
void removeStudent(int positionToRemove)
{
	int decision = 0;
	bool hasDecided = false;

	while (!hasDecided)
	{
		cout << "You are about to delete this student from your roster. Are you sure?" << endl;
		cout << "1. Yes" << endl;
		cout << "2. No" << endl;

		cin >> decision;

		switch (decision)
		{
			case 1:
				studentRoster.erase(studentRoster.begin());
				cout << "Student deleted!" << endl << endl;
				hasDecided = true;
				break;
			case 2:
				cout << "Operation cancelled." << endl;
				studentRoster.erase(studentRoster.begin());
				hasDecided = true;
				break;
			default:
				cout << "This is not a valid option. Please try again." << endl << endl;
				break;
		}
	}

	write();
	
}

//Edits the selected student's data
void editStudent(Student* studentToEdit)
{
	studentToEdit->editStudent();
}

//Displays the selected student's data
void viewStudentData(Student* studentToView)
{
	studentToView->print();
}

//Finds a student and performs the relevant operation specified from the operatin enum
void retrieveStudent(dataOps operation) {
	bool found = false;
	string search;
	cin.ignore(200, '\n');

	if (!found)
	{
		cout << "Couldn't Find a Matching Student!" << endl;
		cout << "Please try a new query or type \"QUIT\" to exit: " << endl;
	}
	while(!found)
	{
		getline(cin, search);

		if (search == "QUIT")
		{
			found = true;
			cout << "Goodbye!";
		}
		cout << endl;
		for (int i = 0; i < studentRoster.size(); i++)
		{
			if (search == studentRoster[i].fullName() || search == studentRoster[i].usfID || search == studentRoster[i].email)
			{
				found = true;

				switch (operation)
				{
				case REMOVE_STUDENT:
					removeStudent(i);
					break;
				case EDIT_STUDENT:
					editStudent(&studentRoster[i]);
					break;
				case VIEW_STUDENT:
					viewStudentData(&studentRoster[i]);
					break;
				default:
					break;
				}
			}
		}
	}
}

void printStudentInformation(Student* studentToPrint)
{
	studentToPrint->print();
}

//Looks for a student and once found performs the correct operation based on the enum value
void searchStudent(dataOps operation)
{
	string search = "";
	Student* foundStudent;

	cout << "Enter a first name and last name, USF ID, or Email Address, or type \"QUIT\" to exit: ";
	retrieveStudent(operation);
}

//Adds a student to the vector and saves the file
void addStudent()
{
	Student student;
	string firstName;
	cout << "First Name: ";
	getline(cin, firstName);
	if (firstName.length() > 40)
	{
		cerr << "Name should be less than 40 characters!" << endl;
		cout << endl;
		return;
	}
	student.firstName = firstName;

	string lastName;
	cout << "Last Name: ";
	getline(cin, lastName);
	if (lastName.length() > 40)
	{
		cerr << "Name should be less than 40 characters!" << endl;
		cout << endl;
		return;
	}
	student.lastName = lastName;

	string usfID;
	cout << "USF ID: ";
	cin >> usfID;
	if (usfID.length() > 10)
	{
		cerr << "USF ID should be less than 10 characters!" << endl;
		cout << endl;
		return;
	}
	student.usfID = usfID;

	string email;
	cout << "Email: ";
	cin >> email;
	if (email.length() > 40)
	{
		cerr << "Email should be less than 40 characters!" << endl;
		cout << endl;
		return;
	}
	student.email = email;

	int presentation;
	cout << "Presentation Grade (0 to 4):";
	cin >> presentation;
	if (presentation != 0 && presentation != 4 && presentation != 3 && presentation != 2 && presentation != 1)
	{
		cerr << "Presentation grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.presentation = presentation;

	int essay1;
	cout << "Essay 1 Grade (0 to 4):";
	cin >> essay1;
	if (essay1 != 0 && essay1 != 4 && essay1 != 3 && essay1 != 2 && essay1 != 1)
	{
		cerr << "Essay 1 grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.essay1 = essay1;

	int essay2;
	cout << "Essay 2 Grade (0 to 4):";
	cin >> essay2;
	if (essay2 != 0 && essay2 != 4 && essay2 != 3 && essay2 != 2 && essay2 != 1)
	{
		cerr << "Essay 2 grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.essay2 = essay2;

	int project;
	cout << "Project Grade (0 to 4):";
	cin >> project;
	if (project != 0 && project != 4 && project != 3 && project != 2 && project != 1)
	{
		cerr << "Project grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.project = project;

	studentRoster.push_back(student);
}

//Main UI Loop
void mainInterface()
{
	int response = -1;
	cout << "Welcome to the Class Roll Program!" << endl << endl;

	while (response != 0)
	{
		
		cout << "What do you want to do?" << endl;
		cout << "1. Add Student" << endl;
		cout << "2. Remove Student" << endl;
		cout << "3. Edit Student" << endl;
		cout << "4. View Student Data" << endl;
		cout << "5. Print All Student Data" << endl;

		cout << "0. Exit" << endl;

		cin >> response;

		switch (response)
		{
			case 1:
				addStudent();
				break;
			case 2:
				searchStudent(REMOVE_STUDENT); //Searches for a student, and if successfully found removes the student
				break;
			case 3:
				searchStudent(EDIT_STUDENT);
				break;
			case 4:
				searchStudent(EDIT_STUDENT);
				break;
			case 5:
				printContentsOfVector();
				break;
			case 0:
				break;
			default:
				cout << "That is not a valid choice! Please try again." << endl;
				break;
		}
	}
	
	cout << "Goodbye!" << endl;
}

//Reads the classRoster.txt file and adds it to the vector studentRoster
void createRoster()
{
	ifstream myfile("classRoster.txt");
	string line;

	while (getline(myfile, line))
	{
		Student s;
		stringstream linestream(line);
		string data;

		string tempGrade1;
		string tempGrade2;
		string tempGrade3;
		string tempGrade4;

		getline(linestream, data, '\t');
		linestream >> s.lastName >> s.lastName >> s.usfID >> s.email >> tempGrade1 >> tempGrade2 >> tempGrade3 >> tempGrade4;

		s.presentation = stoi(tempGrade1); //Must convert strings to integers to save to student
		s.essay1 = stoi(tempGrade2);
		s.essay2 = stoi(tempGrade3);
		s.project = stoi(tempGrade4);

		studentRoster.push_back(s);
	}
}



int main()
{
	createRoster();
	mainInterface();
	system("pause");

    return 0;
}

		case 0:
			return 'F';
			break;
		case 1:
			return 'D';
			break;
		case 2:
			return 'C';
			break;
		case 3:
			return 'B';
			break;
		case 4:
			return 'A';
			break;
		default:
			return 'Z';
		}
	}

	//Converts the letter grade values into numerical values
	int getNumberFromGrade(char gradeVal)
	{
		switch (gradeVal)
		{
		case 'F':
			return 0;
			break;
		case 'D':
			return 1;
			break;
		case 'C':
			return 2;
			break;
		case 'B':
			return 3;
			break;
		case 'A':
			return 4;
			break;
		default:
			return -1;
		}
	}

	//Edits the student's data based on the user's input
	void editStudent()
	{
		int chosenOption = -1;

		string input = "";

		while (chosenOption != 0)
		{
			cout << "What would you like to change?" << endl;
			cout << "1. First Name" << endl;
			cout << "2. Last Name" << endl;
			cout << "3. U-Number" << endl;
			cout << "4. E-Mail Address" << endl;
			cout << "5. Presentation Grade" << endl;
			cout << "6. Essay #1 Grade" << endl;
			cout << "7. Essay #2 Grade" << endl;
			cout << "8. Project Grade" << endl;
			cout << endl;
			cout << "Type 0 to exit." << endl;

			cin >> chosenOption;

			switch (chosenOption)
			{
			case 0:
				cout << "Goodbye!" << endl;
				break;
			case 1:
				cout << "Please Enter a New First Name (Currently: " + firstName + "): " << endl;
				cin >> firstName;
				cout << "First Name Changed to: " << firstName << endl << endl;
				break;
			case 2:
				cout << "Please Enter a New Last Name: (Currently: " + lastName + "): " << endl;
				cin >> lastName;
				cout << "Last Name Changed to: " << lastName << endl << endl;
				break;
			case 3:
				cout << "Please Enter a New U-Number: (Currently: " + usfID + "): " << endl;
				cin >> usfID;
				cout << "U-Number Name Changed to: " << usfID << endl << endl;
				break;
			case 4:
				cout << "Please Enter a New E-Mail Address: (Currently: " + email + "): " << endl;
				cin >> email;
				cout << "E-Mail Address Changed to: " << email << endl << endl;
				break;
			case 5:
				cout << "Please Enter a New Presentation Grade: (Currently: " + string(1, getGradeFromNumber(presentation)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						presentation = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Presentation Grade Changed to: " << string(1, getGradeFromNumber(presentation)) << endl << endl;
				break;
			case 6:
				cout << "Please Enter a New Essay #1 Grade: (Currently: " + string(1, getGradeFromNumber(essay1)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						essay1 = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Essay #1 Grade Changed to: " << string(1, getGradeFromNumber(essay1)) << endl << endl;
				break;
			case 7:
				cout << "Please Enter a New Essay #2 Grade: (Currently: " + string(1, getGradeFromNumber(essay2)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						essay2 = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Essay #2 Grade Changed to: " << string(1, getGradeFromNumber(essay2)) << endl << endl;
				break;
			case 8:
				cout << "Please Enter a New Project Grade: (Currently: " + string(1, getGradeFromNumber(project)) + "): " << endl;
				while (true) {
					getline(cin, input);

					if (input.length() == 1) {
						project = getNumberFromGrade(input[0]);
						break;
					}
				}

				cout << "Project Grade Changed to: " << string(1, getGradeFromNumber(project)) << endl << endl;
				break;
			default:
				cout << "That was not a valid option! Please try again: ";
				break;
			}
		}
	}
};

vector<Student> studentRoster;

enum dataOps {REMOVE_STUDENT, EDIT_STUDENT, VIEW_STUDENT}; //Different options that a user can do once they find a desired student

//Prints the contents of the student roster on the screen
void printContentsOfVector()
{
	for (int i = 0; i < studentRoster.size(); i++)
	{
		studentRoster[i].print();
	}
}

//Rewrites the classRoster.txt file with the contents of studentRoster
void write()
{
	ifstream myfile("classRoster.txt");
	ofstream out_data("classRoster.txt");
	for (int i = 0; i < studentRoster.size(); i++)
	{
		out_data << "\t" << studentRoster[i].firstName << "\t" << studentRoster[i].lastName << "\t" << studentRoster[i].usfID << "\t" << studentRoster[i].email << "\t" << studentRoster[i].presentation << "\t" << studentRoster[i].essay1 << "\t" << studentRoster[i].essay2 << "\t" << studentRoster[i].project << "\n";
	}
	myfile.close();
}

//Removes a student from the vector and updates the file.
void removeStudent(int positionToRemove)
{
	int decision = 0;
	bool hasDecided = false;

	while (!hasDecided)
	{
		cout << "You are about to delete this student from your roster. Are you sure?" << endl;
		cout << "1. Yes" << endl;
		cout << "2. No" << endl;

		cin >> decision;

		switch (decision)
		{
			case 1:
				studentRoster.erase(studentRoster.begin() + positionToRemove);
				cout << "Student deleted!" << endl << endl;
				hasDecided = true;
				break;
			case 2:
				cout << "Operation cancelled." << endl;
				hasDecided = true;
				break;
			default:
				cout << "This is not a valid option. Please try again." << endl << endl;
				break;
		}
	}

	write();
	
}

//Edits the selected student's data
void editStudent(Student* studentToEdit)
{
	studentToEdit->editStudent();
}

//Displays the selected student's data
void viewStudentData(Student* studentToView)
{
	studentToView->print();
}

//Finds a student and performs the relevant operation specified from the operatin enum
void retrieveStudent(dataOps operation) {
	bool found = false;
	string search;
	cin.ignore(200, '\n');

	while(!found)
	{
		getline(cin, search);

		if (search == "QUIT")
		{
			found = true;
			cout << "Goodbye!";
		}
		cout << endl;
		for (int i = 0; i < studentRoster.size(); i++)
		{
			if (search == studentRoster[i].fullName() || search == studentRoster[i].usfID || search == studentRoster[i].email)
			{
				found = true;

				switch (operation)
				{
				case REMOVE_STUDENT:
					removeStudent(i);
					break;
				case EDIT_STUDENT:
					editStudent(&studentRoster[i]);
					break;
				case VIEW_STUDENT:
					viewStudentData(&studentRoster[i]);
					break;
				default:
					break;
				}
			}
		}

		if (!found)
		{
			cout << "Couldn't Find a Matching Student!" << endl;
			cout << "Please try a new query or type \"QUIT\" to exit: " << endl;
		}
	}
}

//Looks for a student and once found performs the correct operation based on the enum value
void searchStudent(dataOps operation)
{
	string search;
	Student* foundStudent;

	cout << "Enter a first name and last name, USF ID, or Email Address, or type \"QUIT\" to exit: ";
	retrieveStudent(operation);
}

//Adds a student to the vector and saves the file
void addStudent()
{
	cin.ignore(200, '\n');
	Student student;
	string firstName;
	cout << "First Name: ";
	getline(cin, firstName);
	if (firstName.length() > 40)
	{
		cerr << "Name should be less than 40 characters!" << endl;
		cout << endl;
		return;
	}
	student.firstName = firstName;

	string lastName;
	cout << "Last Name: ";
	getline(cin, lastName);
	if (lastName.length() > 40)
	{
		cerr << "Name should be less than 40 characters!" << endl;
		cout << endl;
		return;
	}
	student.lastName = lastName;

	string usfID;
	cout << "USF ID: ";
	cin >> usfID;
	if (usfID.length() > 10)
	{
		cerr << "USF ID should be less than 10 characters!" << endl;
		cout << endl;
		return;
	}
	student.usfID = usfID;

	string email;
	cout << "Email: ";
	cin >> email;
	if (email.length() > 40)
	{
		cerr << "Email should be less than 40 characters!" << endl;
		cout << endl;
		return;
	}
	student.email = email;

	int presentation;
	cout << "Presentation Grade (0 to 4):";
	cin >> presentation;
	if (presentation != 0 && presentation != 4 && presentation != 3 && presentation != 2 && presentation != 1)
	{
		cerr << "Presentation grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.presentation = presentation;

	int essay1;
	cout << "Essay 1 Grade (0 to 4):";
	cin >> essay1;
	if (essay1 != 0 && essay1 != 4 && essay1 != 3 && essay1 != 2 && essay1 != 1)
	{
		cerr << "Essay 1 grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.essay1 = essay1;

	int essay2;
	cout << "Essay 2 Grade (0 to 4):";
	cin >> essay2;
	if (essay2 != 0 && essay2 != 4 && essay2 != 3 && essay2 != 2 && essay2 != 1)
	{
		cerr << "Essay 2 grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.essay2 = essay2;

	int project;
	cout << "Project Grade (0 to 4):";
	cin >> project;
	if (project != 0 && project != 4 && project != 3 && project != 2 && project != 1)
	{
		cerr << "Project grade should in range between 0 and 4!" << endl;
		cout << endl;
		return;
	}
	student.project = project;

	studentRoster.push_back(student);
	write();
}

//Main UI Loop
void mainInterface()
{
	int response = -1;
	cout << "Welcome to the Class Roll Program!" << endl << endl;

	while (response != 0)
	{
		
		cout << "What do you want to do?" << endl;
		cout << "1. Add Student" << endl;
		cout << "2. Remove Student" << endl;
		cout << "3. Edit Student" << endl;
		cout << "4. View Student Data" << endl;
		cout << "5. Print All Student Data" << endl;

		cout << "0. Exit" << endl;

		cin >> response;

		switch (response)
		{
			case 1:
				addStudent();
				break;
			case 2:
				searchStudent(REMOVE_STUDENT); //Searches for a student, and if successfully found removes the student
				break;
			case 3:
				searchStudent(EDIT_STUDENT);
				break;
			case 4:
				searchStudent(VIEW_STUDENT);
				break;
			case 5:
				printContentsOfVector();
				break;
			case 0:
				break;
			default:
				cout << "That is not a valid choice! Please try again." << endl;
				break;
		}
	}
	
	cout << "Goodbye!" << endl;
}

//Reads the classRoster.txt file and adds it to the vector studentRoster
void createRoster()
{
	ifstream myfile("classRoster.txt");
	string line;

	if (myfile.is_open())
	{
		while (getline(myfile, line))
		{
			Student s;
			stringstream linestream(line);
			string data;

			string tempGrade1;
			string tempGrade2;
			string tempGrade3;
			string tempGrade4;

			getline(linestream, data, '\t');
			linestream >> s.firstName >> s.lastName >> s.usfID >> s.email >> tempGrade1 >> tempGrade2 >> tempGrade3 >> tempGrade4;

			s.presentation = stoi(tempGrade1);
			s.essay1 = stoi(tempGrade2);
			s.essay2 = stoi(tempGrade3);
			s.project = stoi(tempGrade4);

			studentRoster.push_back(s);
		}
		myfile.close();
	}
}



int main()
{
	createRoster();
	mainInterface();
	write();
	system("pause");

    return 0;
}
